# RepairGPT Full Stack Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-repairgpt}
      POSTGRES_USER: ${POSTGRES_USER:-repairgpt}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-repairgpt}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - repairgpt-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - repairgpt-network

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-repairgpt}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-repairgpt}
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      # API Keys (provide via .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      IFIXIT_API_KEY: ${IFIXIT_API_KEY}
      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY:-generate_a_secure_secret_key}
      DEBUG: ${DEBUG:-false}
      # CORS settings
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8501,http://localhost:3000}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - repairgpt-network
    volumes:
      # Mount for development (uncomment for dev mode)
      # - .:/app
      - /app/__pycache__

  # Streamlit UI
  ui:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    environment:
      API_BASE_URL: http://api:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    ports:
      - "${UI_PORT:-8501}:8501"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - repairgpt-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  repairgpt-network:
    driver: bridge