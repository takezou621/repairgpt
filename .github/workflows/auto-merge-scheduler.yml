name: Auto Merge Scheduler (Legacy - Replaced by Claude Auto Review)

on:
  # DISABLED: Replaced by Claude Auto Review & Merge workflow
  # schedule:
  #   # 毎日3回実行 (JST: 09:00, 15:00, 21:00)
  #   - cron: '0 0,6,12 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Enable dry run mode'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Auto Merge Eligible PRs
      uses: actions/github-script@v7
      env:
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      with:
        script: |
          const now = new Date();
          const isDryRun = process.env.DRY_RUN === 'true';
          const MERGE_DELAY_HOURS = 24; // 24時間後に自動マージ
          
          console.log('🔄 Auto Merge Scheduler - Started');
          console.log('Current time:', now.toISOString());
          console.log('Dry Run:', isDryRun);
          
          // Search for auto-generated PRs
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 50
          });
          
          console.log('📋 Found', prs.data.length, 'open PRs');
          
          let eligibleCount = 0;
          let mergedCount = 0;
          
          for (const pr of prs.data) {
            // Check if this is an auto-generated PR
            const isAutoGenerated = pr.body && (
              pr.body.includes('Generated with [Claude Code]') ||
              pr.body.includes('Claude Smart Automation') ||
              pr.user.login === 'github-actions[bot]' ||
              pr.user.login === 'app/github-actions' ||
              (pr.user.type === 'Bot' && pr.head.ref.startsWith('claude-'))
            );
            
            if (!isAutoGenerated) {
              console.log('⏭️ Skipping non-auto PR #' + pr.number + ':', pr.title);
              continue;
            }
            
            console.log('\\n🔍 Checking auto-generated PR #' + pr.number + ':', pr.title);
            
            // Check PR age
            const prCreatedAt = new Date(pr.created_at);
            const hoursOld = (now - prCreatedAt) / (1000 * 60 * 60);
            
            console.log('⏰ PR age:', Math.round(hoursOld * 10) / 10, 'hours');
            
            if (hoursOld < MERGE_DELAY_HOURS) {
              console.log('⏳ PR not old enough for auto-merge (needs', MERGE_DELAY_HOURS, 'hours)');
              continue;
            }
            
            eligibleCount++;
            
            try {
              // Check PR status
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              // Check if all checks passed
              const failedChecks = checks.data.check_runs.filter(check => 
                check.status === 'completed' && check.conclusion !== 'success'
              );
              
              if (failedChecks.length > 0) {
                console.log('❌ PR has failed checks, skipping auto-merge');
                continue;
              }
              
              // Check if PR is mergeable
              const prDetails = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              if (prDetails.data.mergeable === false) {
                console.log('🔀 PR has merge conflicts, skipping auto-merge');
                continue;
              }
              
              // Check for any blocking reviews
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const blockingReviews = reviews.data.filter(review => 
                review.state === 'CHANGES_REQUESTED'
              );
              
              if (blockingReviews.length > 0) {
                console.log('🚫 PR has blocking reviews, skipping auto-merge');
                continue;
              }
              
              // Perform auto-merge
              console.log('🚀 Performing auto-merge for PR #' + pr.number);
              
              if (!isDryRun) {
                // Add final auto-merge comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: '🤖 **自動マージ実行中**\\n\\n' +
                    '✅ 24時間経過チェック: 通過\\n' +
                    '✅ 全システムチェック: 通過\\n' +
                    '✅ マージ可能性: 確認済み\\n' +
                    '✅ ブロッキングレビュー: なし\\n\\n' +
                    '自動マージを実行します...\\n\\n' +
                    '---\\n' +
                    '🚀 **Auto Merge Scheduler**'
                });
                
                // Perform the merge
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  commit_title: 'Auto-merge: ' + pr.title,
                  commit_message: '自動マージ実行\\n\\n' +
                    'PR: #' + pr.number + '\\n' +
                    '24時間経過後の自動マージ\\n\\n' +
                    '🚀 Generated with [Claude Code](https://claude.ai/code)\\n\\n' +
                    'Co-Authored-By: Claude <noreply@anthropic.com>',
                  merge_method: 'squash'
                });
                
                console.log('✅ Successfully merged PR #' + pr.number);
                mergedCount++;
                
                // Close related issue if exists
                const issueMatch = pr.body.match(/closes #(\\d+)/i);
                if (issueMatch) {
                  const issueNumber = parseInt(issueMatch[1]);
                  
                  try {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      state: 'closed'
                    });
                    
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: '✅ **Issue自動完了**\\n\\n' +
                        'PR #' + pr.number + ' が自動マージされたため、このIssueを自動クローズします。\\n\\n' +
                        '🎉 **完全自動化達成**: Issue作成 → 実装 → PR → マージ → クローズ\\n\\n' +
                        '---\\n' +
                        '🚀 **Claude Smart Automation Enhanced**'
                    });
                    
                    console.log('🔒 Automatically closed Issue #' + issueNumber);
                  } catch (issueError) {
                    console.log('⚠️ Could not close related issue:', issueError.message);
                  }
                }
                
                // Delete the branch
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/' + pr.head.ref
                  });
                  console.log('🧹 Deleted branch:', pr.head.ref);
                } catch (branchError) {
                  console.log('⚠️ Could not delete branch:', branchError.message);
                }
                
              } else {
                console.log('🧪 DRY RUN: Would merge PR #' + pr.number);
              }
              
            } catch (error) {
              console.log('❌ Error processing PR #' + pr.number + ':', error.message);
            }
          }
          
          // Print summary
          console.log('\\n📊 **Auto Merge Summary**');
          console.log('- 対象PR数:', prs.data.length + '個');
          console.log('- 自動マージ対象:', eligibleCount + '個');
          console.log('- 実際にマージ:', mergedCount + '個');
          console.log('- 実行モード:', isDryRun ? 'ドライラン' : '本番実行');