name: Test Fixed Automation

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Enable dry run mode'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test-fixed:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Test Fixed Implementation
      uses: actions/github-script@v7
      with:
        script: |
          const isDryRun = '${{ github.event.inputs.dry_run }}' === 'true';
          console.log('🧪 Testing Fixed Auto-Implementation Feature');
          console.log(`Dry Run Mode: ${isDryRun}`);
          
          // Issue検索
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'claude-processed',
            state: 'open',
            per_page: 5
          });
          
          console.log(`Found ${issues.data.length} issues with claude-processed label`);
          
          for (const issue of issues.data) {
            console.log(`Issue #${issue.number}: ${issue.title}`);
            
            // ブランチ検索
            const branches = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50
            });
            
            const issueNum = issue.number.toString();
            const matchingBranches = branches.data.filter(branch => {
              const branchLower = branch.name.toLowerCase();
              return (
                branchLower.includes(`issue-${issueNum}`) ||
                (branchLower.includes('claude') && branchLower.includes(issueNum)) ||
                branchLower.includes(`fix-${issueNum}`) ||
                branchLower.includes(`feature-${issueNum}`)
              );
            });
            
            if (matchingBranches.length === 0) {
              console.log(`⚠️ No branch found for Issue #${issue.number} - Would start auto-implementation`);
              
              // 実装タイプ判定テスト
              const issueBody = issue.body || '';
              const issueTitle = issue.title || '';
              const combinedText = `${issueTitle}\n\n${issueBody}`;
              
              let implementationType = 'documentation';
              if (combinedText.match(/ワークフロー|workflow|github.*action/i)) {
                implementationType = 'workflow';
              } else if (combinedText.match(/機能.*追加|feature.*add|実装|implement/i)) {
                implementationType = 'feature';
              } else if (combinedText.match(/バグ|bug|修正|fix|エラー|error/i)) {
                implementationType = 'bugfix';
              }
              
              console.log(`📊 Detected implementation type: ${implementationType}`);
              
              if (isDryRun) {
                console.log('🧪 DRY RUN: Would create auto-implementation');
              } else {
                // 実際のテストコメント追加
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '🧪 **修正版テスト実行中**',
                    '',
                    `✅ **実装タイプ判定**: ${implementationType}`,
                    '✅ **構文エラー**: 修正済み',
                    '✅ **機能動作**: 正常確認',
                    '',
                    '修正版ワークフローが正常に動作しています！',
                    '',
                    '---',
                    '🚀 **Claude Smart Automation Fixed**'
                  ].join('\n')
                });
              }
              
            } else {
              console.log(`✅ Found ${matchingBranches.length} branch(es) for Issue #${issue.number}`);
            }
          }
          
          console.log('🎉 Fixed workflow test completed successfully!');