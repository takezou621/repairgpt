name: Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Create test directories
      run: |
        mkdir -p tests
        mkdir -p src
    
    - name: Run tests with pytest
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        else
          echo "No tests found - creating placeholder test"
          echo "def test_placeholder(): assert True" > tests/test_placeholder.py
          pytest tests/test_placeholder.py -v
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest.log

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_password_12345' }}
          POSTGRES_DB: repairgpt_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio asyncpg redis
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Wait for services
      env:
        PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_password_12345' }}
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD || 'test_password_12345' }}@localhost:5432/repairgpt_test
        REDIS_URL: redis://localhost:6379
      run: |
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
          pytest tests/integration/ -v
        else
          echo "No integration tests found - skipping"
        fi