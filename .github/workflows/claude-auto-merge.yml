name: Claude Auto PR and Merge

on:
  issue_comment:
    types: [created, edited]
  workflow_run:
    workflows: ["Claude Code"]
    types: [completed]

jobs:
  auto-pr-and-merge:
    # Claudeが作業完了を報告した場合のみ実行
    if: |
      github.event_name == 'issue_comment' && 
      github.event.comment.user.login == 'claude' &&
      (contains(github.event.comment.body, '作業が完了') || 
       contains(github.event.comment.body, '作業完了') ||
       contains(github.event.comment.body, 'finished') ||
       contains(github.event.comment.body, 'Task completed') ||
       contains(github.event.comment.body, 'Implementation complete') ||
       contains(github.event.comment.body, 'work is complete') ||
       contains(github.event.comment.body, 'job is done'))
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      metadata: read
      checks: read
      repository-projects: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get issue and branch information
      id: issue-info
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          let issueNumber, issueTitle, issueBody;
          
          // コメントイベントの場合
          issueNumber = context.issue.number;
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });
          issueTitle = issue.data.title;
          issueBody = issue.data.body;
          
          // Claudeが作成したブランチを検索
          let candidateBranches = [
            `claude/issue-${issueNumber}`,
            `fix/issue-${issueNumber}`,
            `feature/issue-${issueNumber}`,
            `claude/issue-${issueNumber}-*`
          ];
          
          // 全ブランチを取得してissue番号にマッチするものを検索
          const branches = await github.rest.repos.listBranches({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const matchingBranch = branches.data.find(branch => 
            branch.name.includes(`issue-${issueNumber}`) || 
            branch.name.includes(`${issueNumber}`)
          );
          
          const branchName = matchingBranch ? matchingBranch.name : `fix/issue-${issueNumber}`;
          const prTitle = `fix: ${issueTitle} (closes #${issueNumber})`;
          
          return {
            issueNumber,
            issueTitle,
            issueBody,
            branchName,
            prTitle,
            branchExists: !!matchingBranch
          };
    
    - name: Check if branch exists and create PR
      id: create-pr
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueInfo = ${{ steps.issue-info.outputs.result }};
          
          if (!issueInfo.issueNumber) {
            console.log('No issue information found, skipping PR creation');
            return { created: false };
          }
          
          if (!issueInfo.branchExists) {
            console.log(`No matching branch found for issue #${issueInfo.issueNumber}, skipping PR creation`);
            return { created: false, issueNumber: issueInfo.issueNumber };
          }
          
          // 既存のPRをチェック
          const existingPRs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${context.repo.owner}:${issueInfo.branchName}`,
            state: 'open'
          });
          
          if (existingPRs.data.length > 0) {
            console.log('PR already exists for this branch');
            return { 
              created: false, 
              prNumber: existingPRs.data[0].number,
              issueNumber: issueInfo.issueNumber 
            };
          }
          
          // PRを作成
          const prBody = `## 概要
このPRはClaude Code Maxによって自動実装されたissue #${issueInfo.issueNumber}の解決です。

## 関連Issue
Closes #${issueInfo.issueNumber}

## 変更内容
Claudeが実装した変更内容：
- Issue "${issueInfo.issueTitle}" への対応

## テスト
- [ ] 動作確認済み
- [ ] 既存機能への影響なし

---
🤖 自動生成されたPR (Claude Code Max)`;
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueInfo.prTitle,
            head: issueInfo.branchName,
            base: 'main',
            body: prBody
          });
          
          console.log(`Created PR #${pr.data.number}`);
          
          return {
            created: true,
            prNumber: pr.data.number,
            issueNumber: issueInfo.issueNumber
          };
    
    - name: Auto-review and merge PR
      if: steps.create-pr.outputs.result && fromJSON(steps.create-pr.outputs.result).created
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const result = ${{ steps.create-pr.outputs.result }};
          
          if (!result.created) {
            console.log('No PR was created, skipping auto-merge');
            return;
          }
          
          const prNumber = result.prNumber;
          
          // PRに自動レビューラベルを追加
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            labels: ['claude-auto-generated', 'ready-for-merge']
          });
          
          // 少し待ってからマージ（CI/CDがある場合の時間確保）
          console.log('Waiting before merge...');
          await new Promise(resolve => setTimeout(resolve, 15000));
          
          try {
            // PRをマージ
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              commit_title: `Auto-merge: Claude Code implementation for issue #${result.issueNumber}`,
              commit_message: `Automatically merged PR created by Claude Code Max for issue #${result.issueNumber}`,
              merge_method: 'squash'
            });
            
            console.log(`Successfully merged PR #${prNumber}`);
            
            // マージ完了コメントをIssueに追加
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: result.issueNumber,
              body: `✅ **自動マージ完了**

PR #${prNumber} が正常にマージされました。
Claude Code Maxによる実装が本番ブランチに反映されました。

🤖 自動化フロー完了`
            });
            
          } catch (error) {
            console.log(`Failed to merge PR #${prNumber}: ${error.message}`);
            
            // マージ失敗をIssueに報告
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: result.issueNumber,
              body: `⚠️ **自動マージに失敗しました**

PR #${prNumber} の自動マージに失敗しました。
手動でのレビューとマージが必要です。

エラー: ${error.message}`
            });
          }
    
    - name: Close issue and cleanup
      if: steps.create-pr.outputs.result
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const result = ${{ steps.create-pr.outputs.result }};
          const issueNumber = result.issueNumber;
          
          if (!issueNumber) {
            console.log('No issue number found, skipping cleanup');
            return;
          }
          
          // PRが正常にマージされた場合、Issueをクローズ
          if (result.created) {
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              
              console.log(`Closed issue #${issueNumber}`);
              
              // 完了ラベルを追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['claude-completed']
              });
              
            } catch (error) {
              console.log(`Failed to close issue #${issueNumber}: ${error.message}`);
            }
          }
    
    - name: Delete feature branch
      if: steps.create-pr.outputs.result && fromJSON(steps.create-pr.outputs.result).created
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const result = ${{ steps.create-pr.outputs.result }};
          
          if (!result.created) {
            console.log('No PR was created, skipping branch deletion');
            return;
          }
          
          const branchName = `fix/issue-${result.issueNumber}`;
          
          try {
            // 少し待ってからブランチを削除（マージ完了後の時間確保）
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${branchName}`
            });
            
            console.log(`Deleted branch ${branchName}`);
            
          } catch (error) {
            console.log(`Failed to delete branch ${branchName}: ${error.message}`);
          }