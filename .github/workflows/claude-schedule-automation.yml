name: Claude Schedule Automation

on:
  schedule:
    # 5分ごとに実行して未処理のClaude作業をチェック
    - cron: '*/5 * * * *'
  workflow_dispatch: # 手動実行も可能

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      metadata: read
      checks: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Find unprocessed Claude work
      id: find-work
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('🔍 Searching for unprocessed Claude work...');
          
          // 1. claude-processedラベルがあるオープンなissueを取得
          const processedIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'claude-processed',
            per_page: 100
          });
          
          console.log(`Found ${processedIssues.data.length} claude-processed issues`);
          
          // 2. 全ブランチを取得
          const branches = await github.rest.repos.listBranches({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const claudeBranches = branches.data.filter(branch => 
            branch.name.includes('claude/issue-') || 
            branch.name.includes('claude/') ||
            branch.name.match(/issue-\d+/)
          );
          
          console.log(`Found ${claudeBranches.length} potential Claude branches`);
          
          // 3. 既存のPRがないブランチをチェック
          const existingPRs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            per_page: 100
          });
          
          const prBranches = existingPRs.data.map(pr => pr.head.ref);
          
          // 4. 未処理のブランチとissueを特定
          const unprocessedWork = [];
          
          for (const issue of processedIssues.data) {
            // 対応するブランチを検索
            const correspondingBranch = claudeBranches.find(branch => 
              branch.name.includes(`issue-${issue.number}`) ||
              branch.name.includes(`${issue.number}`)
            );
            
            if (correspondingBranch && !prBranches.includes(correspondingBranch.name)) {
              // ブランチはあるがPRがない = 未処理
              unprocessedWork.push({
                issueNumber: issue.number,
                issueTitle: issue.title,
                branchName: correspondingBranch.name,
                issueUrl: issue.html_url
              });
              console.log(`📋 Found unprocessed work: Issue #${issue.number}, Branch: ${correspondingBranch.name}`);
            }
          }
          
          console.log(`🎯 Total unprocessed work found: ${unprocessedWork.length}`);
          
          return {
            found: unprocessedWork.length > 0,
            workItems: unprocessedWork,
            count: unprocessedWork.length
          };
    
    - name: Process unprocessed work
      if: fromJSON(steps.find-work.outputs.result).found
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const workResult = ${{ steps.find-work.outputs.result }};
          
          console.log(`🚀 Processing ${workResult.count} unprocessed work items...`);
          
          for (const work of workResult.workItems) {
            console.log(`\n📝 Processing Issue #${work.issueNumber}: ${work.issueTitle}`);
            
            try {
              // PRを作成
              const prBody = `## 🤖 Claude Code Max による自動実装

### 関連Issue
Closes #${work.issueNumber}

### 概要
Claude Code Maxが Issue "${work.issueTitle}" を解決しました。

### 実装詳細
- **Issue**: #${work.issueNumber}
- **ブランチ**: \`${work.branchName}\`
- **トリガー**: スケジュール自動検知

### 自動化フロー
- [x] ✅ Claude Code Maxによる実装完了
- [x] ✅ スケジュール自動検知
- [x] ✅ 自動PR作成
- [ ] 🔄 自動マージ
- [ ] 🔄 Issue自動クローズ
- [ ] 🔄 ブランチ自動削除

---
🤖 **完全自動化フロー** | 検知方式: スケジュール | Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>`;

              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `fix: ${work.issueTitle} (closes #${work.issueNumber})`,
                head: work.branchName,
                base: 'main',
                body: prBody
              });
              
              console.log(`✅ Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // ラベルを追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: [
                  'claude-auto-generated',
                  'claude-full-automation',
                  'ready-for-merge'
                ]
              });
              
              // 少し待ってから自動マージ
              console.log('⏳ Waiting before auto-merge...');
              await new Promise(resolve => setTimeout(resolve, 15000));
              
              try {
                // 自動マージ実行
                const mergeResult = await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.data.number,
                  commit_title: `Auto-merge: Claude Code implementation for issue #${work.issueNumber}`,
                  commit_message: `Automatically merged PR #${pr.data.number} created by Claude Code Max for issue #${work.issueNumber}

🤖 Complete schedule automation flow executed successfully

Co-Authored-By: Claude <noreply@anthropic.com>`,
                  merge_method: 'squash'
                });
                
                console.log(`🎉 Successfully merged PR #${pr.data.number}`);
                
                // マージ成功をIssueに報告
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: work.issueNumber,
                  body: `✅ **完全自動化フロー実行完了**

Claude Code Maxによる実装が正常に完了し、スケジュール自動検知により本番ブランチにマージされました。

**実行内容:**
- 🕐 スケジュール自動検知（5分間隔）
- 🤖 Claude Code Maxによる自動実装
- 📝 自動PR作成: #${pr.data.number}
- ✅ 自動マージ実行
- 🧹 ブランチクリーンアップ（次のステップで実行）

**PR**: ${pr.data.html_url}

---
🚀 **100%自動化達成** | 検知方式: スケジュール | Claude Code Max + GitHub Actions`
                });
                
                // Issueをクローズ
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: work.issueNumber,
                  state: 'closed'
                });
                
                // 完了ラベルを追加
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: work.issueNumber,
                  labels: ['claude-completed', 'fully-automated']
                });
                
                console.log(`🔒 Closed issue #${work.issueNumber}`);
                
                // ブランチ削除
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${work.branchName}`
                });
                
                console.log(`🗑️ Deleted branch ${work.branchName}`);
                
              } catch (mergeError) {
                console.log(`❌ Failed to merge PR #${pr.data.number}: ${mergeError.message}`);
                
                // マージ失敗を報告
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: work.issueNumber,
                  body: `⚠️ **自動マージに失敗**

PR #${pr.data.number} の自動マージでエラーが発生しました。

**エラー詳細**: ${mergeError.message}

**PR**: ${pr.data.html_url}

手動でのレビューとマージをお願いします。`
                });
              }
              
            } catch (prError) {
              console.log(`❌ Failed to create PR for issue #${work.issueNumber}: ${prError.message}`);
            }
            
            // 次の処理までの間隔
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
          
          console.log('🎉 All unprocessed work has been processed!');
    
    - name: Summary report
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const workResult = ${{ steps.find-work.outputs.result || '{"found": false, "count": 0}' }};
          
          if (workResult.found) {
            console.log(`📊 Schedule automation summary:`);
            console.log(`   - Processed items: ${workResult.count}`);
            console.log(`   - Status: Complete`);
            console.log(`   - Next check: In 5 minutes`);
          } else {
            console.log(`✨ No unprocessed Claude work found. System is up to date.`);
          }
          
          console.log(`\n🔄 Next scheduled check: ${new Date(Date.now() + 5 * 60 * 1000).toISOString()}`);