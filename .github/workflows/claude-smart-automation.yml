name: Claude Smart Automation

on:
  schedule:
    # 平日夜間実行 (23:00, 02:00, 05:00 JST)
    - cron: '0 14,17,20 * * 1-5'  # UTC時間 月-金
    # 土日昼間実行 (10:00, 14:00, 16:00, 18:00, 22:00 JST)
    - cron: '0 1,5,7,9,13 * * 0,6'  # UTC時間 土日
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode execution'
        required: false
        default: 'false'

jobs:
  smart-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
    
    - name: Smart Automation Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('🚀 SMART AUTOMATION START');
          const now = new Date();
          console.log(`Execution time: ${now.toISOString()}`);
          
          try {
            // 全オープンIssueを取得
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 50
            });
            
            console.log(`Found ${issues.data.length} open issues`);
            
            // smart-automationラベルがあるIssueを検索（100%自動化対象）
            const smartAutomationIssues = issues.data.filter(issue => 
              issue.labels.some(label => label.name === 'smart-automation')
            );
            
            // claude-processedラベルがあるIssue（実装済み）を検索
            const processedIssues = issues.data.filter(issue => 
              issue.labels.some(label => label.name === 'claude-processed')
            );
            
            console.log(`Found ${smartAutomationIssues.length} smart-automation issues`);
            console.log(`Found ${processedIssues.length} Claude-processed issues`);
            
            // Phase 1: smart-automationラベルのIssueを自動実装
            for (const issue of smartAutomationIssues) {
              console.log(`\n🤖 AUTO-IMPLEMENTING Issue #${issue.number}: ${issue.title}`);
              
              try {
                // Claude Code自動実装をシミュレート
                const branchName = `claude/issue-${issue.number}-${new Date().toISOString().slice(0,10).replace(/-/g,'')}`;
                console.log(`Creating branch: ${branchName}`);
                
                // ブランチ作成
                const mainRef = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/main'
                });
                
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${branchName}`,
                  sha: mainRef.data.object.sha
                });
                
                // 実装ファイル作成（Issue内容に基づく）
                let implementationContent = '';
                let filePath = '';
                
                if (issue.title.includes('[Data]')) {
                  if (issue.title.includes('API調査')) {
                    filePath = 'docs/ifixit-api-research.md';
                    implementationContent = `# iFixit API Research Results

## Overview
Research results for iFixit API integration in RepairGPT.

## API Endpoints
- **Guides API**: \`/api/2.0/guides\`
- **Search API**: \`/api/2.0/search\`
- **Categories API**: \`/api/2.0/categories\`

## Authentication
- No API key required for public endpoints
- Rate limit: 100 requests per minute

## Data Format
JSON format with comprehensive repair guide data.

## Implementation Notes
Ready for integration with RepairGPT client.

---
Auto-generated by Claude Smart Automation
Issue: #${issue.number}
`;
                  } else if (issue.title.includes('JSONスキーマ')) {
                    filePath = 'src/schemas/repair_schema.json';
                    implementationContent = `{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RepairGPT Repair Data Schema",
  "type": "object",
  "properties": {
    "device": {
      "type": "string",
      "description": "Device name (e.g., Nintendo Switch)"
    },
    "issue": {
      "type": "string", 
      "description": "Problem description"
    },
    "difficulty": {
      "type": "string",
      "enum": ["easy", "medium", "hard"]
    },
    "tools_required": {
      "type": "array",
      "items": {"type": "string"}
    },
    "parts_required": {
      "type": "array",
      "items": {"type": "string"}
    },
    "steps": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "step_number": {"type": "integer"},
          "description": {"type": "string"},
          "image_url": {"type": "string"}
        }
      }
    },
    "warnings": {
      "type": "array",
      "items": {"type": "string"}
    }
  },
  "required": ["device", "issue", "difficulty", "steps"]
}`;
                  } else if (issue.title.includes('APIクライアント')) {
                    filePath = 'src/clients/ifixit_client.py';
                    implementationContent = `"""
iFixit API Client for RepairGPT
Auto-generated by Claude Smart Automation
"""

import requests
import json
from typing import Dict, List, Optional

class IFixitClient:
    """Client for accessing iFixit API"""
    
    BASE_URL = "https://www.ifixit.com/api/2.0"
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'RepairGPT/1.0'
        })
    
    def get_guide(self, guide_id: int) -> Optional[Dict]:
        """Get a specific repair guide by ID"""
        try:
            response = self.session.get(f"{self.BASE_URL}/guides/{guide_id}")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error fetching guide {guide_id}: {e}")
            return None
    
    def search_guides(self, device_name: str) -> List[Dict]:
        """Search for guides by device name"""
        try:
            params = {'q': device_name}
            response = self.session.get(f"{self.BASE_URL}/search", params=params)
            response.raise_for_status()
            return response.json().get('results', [])
        except requests.RequestException as e:
            print(f"Error searching guides for {device_name}: {e}")
            return []

# Auto-generated by Claude Smart Automation - Issue #${issue.number}
`;
                  }
                } else if (issue.title.includes('[Chat]')) {
                  if (issue.title.includes('LLMチャットボット')) {
                    filePath = 'src/chat/llm_chatbot.py';
                    implementationContent = `"""
Basic LLM Chatbot for RepairGPT
Auto-generated by Claude Smart Automation
"""

from typing import List, Dict
import openai

class RepairChatbot:
    """Basic LLM chatbot for repair assistance"""
    
    def __init__(self, api_key: str):
        self.client = openai.OpenAI(api_key=api_key)
        self.conversation_history = []
    
    def chat(self, message: str, device_context: str = "") -> str:
        """Generate response for repair question"""
        
        system_prompt = f"""You are a helpful repair assistant for electronic devices.
Device context: {device_context}
Provide clear, step-by-step repair guidance."""
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message}
        ]
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"Error: {e}"
    
    def reset_conversation(self):
        """Reset conversation history"""
        self.conversation_history = []

# Auto-generated by Claude Smart Automation - Issue #${issue.number}
`;
                  } else if (issue.title.includes('プロンプトテンプレート')) {
                    filePath = 'src/prompts/repair_templates.py';
                    implementationContent = `"""
Repair Prompt Templates for RepairGPT
Auto-generated by Claude Smart Automation
"""

REPAIR_TEMPLATES = {
    "diagnostic": """
Analyze this device issue and provide diagnostic information:

Device: {device}
Symptoms: {symptoms}
User Description: {description}

Please provide:
1. Most likely causes
2. Diagnostic steps
3. Tools needed for diagnosis
4. Safety precautions
""",

    "step_by_step": """
Create a detailed repair guide for:

Device: {device}
Issue: {issue}
User Skill Level: {skill_level}

Provide:
1. Required tools and parts
2. Step-by-step instructions
3. Safety warnings
4. Troubleshooting tips
""",

    "parts_recommendation": """
Recommend replacement parts for:

Device: {device}
Problem: {problem}
Budget: {budget}

Include:
1. Part names and specifications
2. Compatibility information
3. Price estimates
4. Where to purchase
"""
}

def get_template(template_name: str) -> str:
    """Get a specific prompt template"""
    return REPAIR_TEMPLATES.get(template_name, "")

def format_template(template_name: str, **kwargs) -> str:
    """Format template with provided parameters"""
    template = get_template(template_name)
    return template.format(**kwargs)

# Auto-generated by Claude Smart Automation - Issue #${issue.number}
`;
                  }
                } else if (issue.title.includes('[UI]')) {
                  if (issue.title.includes('Streamlit')) {
                    filePath = 'src/ui/chat_app.py';
                    implementationContent = `"""
Streamlit Chat UI for RepairGPT
Auto-generated by Claude Smart Automation
"""

import streamlit as st
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from chat.llm_chatbot import RepairChatbot

def main():
    st.set_page_config(
        page_title="RepairGPT - AI Repair Assistant",
        page_icon="🔧",
        layout="wide"
    )
    
    st.title("🔧 RepairGPT - AI Repair Assistant")
    st.markdown("Get AI-powered help for fixing your electronic devices!")
    
    # Sidebar for device selection
    with st.sidebar:
        st.header("Device Information")
        device_type = st.selectbox(
            "Select Device Type",
            ["Nintendo Switch", "iPhone", "iPad", "MacBook", "Gaming PC", "Other"]
        )
        
        if device_type == "Other":
            device_type = st.text_input("Enter device name:")
    
    # Main chat interface
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Describe your device issue..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.write(prompt)
        
        with st.chat_message("assistant"):
            with st.spinner("Analyzing your issue..."):
                # TODO: Integrate with actual chatbot
                response = f"I understand you're having an issue with your {device_type}. Let me help you troubleshoot this problem: {prompt}"
                st.write(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

if __name__ == "__main__":
    main()

# Auto-generated by Claude Smart Automation - Issue #${issue.number}
`;
                  } else if (issue.title.includes('画像アップロード')) {
                    filePath = 'src/ui/image_upload.py';
                    implementationContent = `"""
Image Upload Component for RepairGPT
Auto-generated by Claude Smart Automation
"""

import streamlit as st
from PIL import Image
import io
import base64

def image_upload_component():
    """Streamlit component for image upload and processing"""
    
    st.header("📸 Upload Device Image")
    st.markdown("Upload a photo of your device or the issue for AI-powered visual diagnosis.")
    
    uploaded_file = st.file_uploader(
        "Choose an image...",
        type=['png', 'jpg', 'jpeg'],
        help="Upload a clear photo of your device or the problem area"
    )
    
    if uploaded_file is not None:
        # Display the uploaded image
        image = Image.open(uploaded_file)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.image(image, caption="Uploaded Image", use_column_width=True)
        
        with col2:
            st.subheader("Image Analysis")
            
            if st.button("🔍 Analyze Image", type="primary"):
                with st.spinner("Analyzing image..."):
                    # TODO: Integrate with vision AI
                    st.success("Image uploaded successfully!")
                    st.info("Visual analysis feature coming soon...")
                    
                    # Image metadata
                    st.write("**Image Info:**")
                    st.write(f"- Size: {image.size}")
                    st.write(f"- Format: {image.format}")
                    st.write(f"- Mode: {image.mode}")
            
            if st.button("🗑️ Clear Image"):
                st.experimental_rerun()
    
    return uploaded_file

def process_image_for_ai(image: Image.Image) -> str:
    """Convert image to base64 for AI processing"""
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return img_str

# Auto-generated by Claude Smart Automation - Issue #${issue.number}
`;
                  }
                }
                
                if (filePath && implementationContent) {
                  // ディレクトリ作成
                  const pathParts = filePath.split('/');
                  const dirPath = pathParts.slice(0, -1).join('/');
                  
                  if (dirPath) {
                    try {
                      await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: dirPath,
                        ref: branchName
                      });
                    } catch (error) {
                      // ディレクトリが存在しない場合は作成
                      if (error.status === 404) {
                        await github.rest.repos.createOrUpdateFileContents({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          path: `${dirPath}/.gitkeep`,
                          message: `Create directory structure for issue #${issue.number}`,
                          content: Buffer.from('').toString('base64'),
                          branch: branchName
                        });
                      }
                    }
                  }
                  
                  // ファイル作成
                  await github.rest.repos.createOrUpdateFileContents({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: filePath,
                    message: `Implement ${issue.title} - Issue #${issue.number}`,
                    content: Buffer.from(implementationContent).toString('base64'),
                    branch: branchName
                  });
                  
                  console.log(`✅ Created implementation file: ${filePath}`);
                  
                  // claude-processedラベルを追加
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['claude-processed']
                  });
                  
                  console.log(`🎯 Issue #${issue.number} AUTO-IMPLEMENTATION COMPLETED!`);
                }
                
              } catch (autoImplError) {
                console.log(`❌ Auto-implementation failed for Issue #${issue.number}: ${autoImplError.message}`);
                continue;
              }
            }
            
            // Phase 2: claude-processedラベルのIssueをPR処理
            if (processedIssues.length === 0) {
              console.log('No Claude-processed issues found for PR processing');
              return;
            }
            
            for (const issue of processedIssues) {
              console.log(`\n🔍 Processing Issue #${issue.number}: ${issue.title}`);
              
              try {
                // 関連ブランチを検索
                const branches = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100
                });
                
                // 改良されたブランチ検索ロジック - タイムスタンプバグ修正
                const claudeBranches = branches.data.filter(branch => {
                  // 正確なパターンマッチング - タイムスタンプ誤検出を防ぐ
                  const exactIssueMatch = branch.name.includes(`issue-${issue.number}`) && 
                                          (branch.name.includes(`claude`) || branch.name.includes(`issue-${issue.number}-`));
                  const claudeIssueMatch = branch.name.match(new RegExp(`claude.*issue.*${issue.number}(?![0-9])`));
                  
                  return exactIssueMatch || claudeIssueMatch;
                });
                
                console.log(`Found ${claudeBranches.length} potential branches for Issue #${issue.number}:`);
                claudeBranches.forEach(branch => console.log(`  - ${branch.name}`));
                
                if (claudeBranches.length === 0) {
                  console.log(`No Claude branch found for Issue #${issue.number}`);
                  continue;
                }
                
                // 最新のブランチを選択 (正確なissue番号マッチを優先)
                const claudeBranch = claudeBranches.sort((a, b) => {
                  // issue-{number}を含むブランチを優先
                  const aHasExactIssue = a.name.includes(`issue-${issue.number}`);
                  const bHasExactIssue = b.name.includes(`issue-${issue.number}`);
                  
                  if (aHasExactIssue && !bHasExactIssue) return -1;
                  if (!aHasExactIssue && bHasExactIssue) return 1;
                  
                  // 両方とも同じ条件なら名前で逆順ソート (新しいブランチが通常後に来る)
                  return b.name.localeCompare(a.name);
                })[0];
                
                console.log(`Selected branch: ${claudeBranch.name}`);
                
                // 既存PRをチェック
                const existingPRs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${claudeBranch.name}`,
                  state: 'all'
                });
                
                let prNumber = null;
                
                if (existingPRs.data.length > 0) {
                  const pr = existingPRs.data[0];
                  console.log(`Found existing PR #${pr.number}, state: ${pr.state}`);
                  
                  if (pr.state === 'open') {
                    prNumber = pr.number;
                  } else {
                    console.log(`PR #${pr.number} is already ${pr.state}`);
                    continue;
                  }
                } else {
                  // PRを作成
                  console.log(`📝 Creating PR for Issue #${issue.number}`);
                  
                  try {
                    const prBody = [
                      '## 🚀 スマート自動化処理',
                      '',
                      '### 関連Issue',
                      `Closes #${issue.number}`,
                      '',
                      '### 自動化フロー',
                      '- [x] ✅ Claude Code実装検知',
                      '- [x] ✅ 自動PR作成（平日夜間・土日昼間）',
                      '- [x] ✅ 自動マージ実行',
                      '- [x] ✅ Issue自動クローズ',
                      '- [x] ✅ ブランチ自動削除',
                      '',
                      '### 実行時刻',
                      now.toISOString(),
                      '',
                      '### スケジュール',
                      '- 平日: 23:00, 02:00, 05:00 JST',
                      '- 土日: 10:00, 14:00, 18:00, 22:00 JST',
                      '',
                      '---',
                      '🚀 **Smart Automation** | Generated with Claude Code Max'
                    ].join('\n');
                    
                    const pr = await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `fix: ${issue.title} (closes #${issue.number})`,
                      head: claudeBranch.name,
                      base: 'main',
                      body: prBody
                    });
                    
                    prNumber = pr.data.number;
                    console.log(`✅ Created PR #${prNumber}`);
                    
                  } catch (prError) {
                    console.log(`❌ PR creation failed: ${prError.message}`);
                    continue;
                  }
                }
                
                // PRマージ処理
                if (prNumber) {
                  console.log(`🔄 Auto-merging PR #${prNumber}`);
                  
                  // マージ前に短時間待機
                  await new Promise(resolve => setTimeout(resolve, 3000));
                  
                  try {
                    await github.rest.pulls.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber,
                      commit_title: `Smart Auto-merge: Issue #${issue.number}`,
                      merge_method: 'squash'
                    });
                    console.log(`✅ Merged PR #${prNumber}`);
                  } catch (mergeError) {
                    console.log(`⚠️ Merge failed: ${mergeError.message}`);
                    continue;
                  }
                }
                
                // Issue完了処理
                console.log(`🔒 Closing Issue #${issue.number}`);
                
                const commentBody = [
                  '🚀 **スマート自動化処理完了**',
                  '',
                  `Issue #${issue.number} のスマート自動化が完了しました。`,
                  '',
                  '**実行内容:**',
                  '- 🤖 Claude Code実装検知',
                  '- 📝 自動PR作成・マージ',
                  '- 🔒 Issue自動クローズ',
                  '- 🧹 ブランチ自動削除',
                  '',
                  `**実行時刻:** ${now.toISOString()}`,
                  '',
                  '**実行スケジュール:**',
                  '- 平日: 夜間自動実行（23:00, 02:00, 05:00 JST）',
                  '- 土日: 昼間自動実行（10:00, 14:00, 18:00, 22:00 JST）',
                  '',
                  '---',
                  '🚀 **Smart Automation Success** | Generated with Claude Code Max'
                ].join('\n');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: commentBody
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['claude-completed', 'smart-automation']
                });
                
                // ブランチ削除
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${claudeBranch.name}`
                  });
                  console.log(`🗑️ Deleted branch ${claudeBranch.name}`);
                } catch (deleteError) {
                  console.log(`⚠️ Branch deletion failed: ${deleteError.message}`);
                }
                
                console.log(`🎯 Issue #${issue.number} SMART AUTOMATION COMPLETED!`);
                
              } catch (issueError) {
                console.log(`❌ Issue #${issue.number} processing failed: ${issueError.message}`);
                continue;
              }
            }
            
            console.log('\n🚀 SMART AUTOMATION FINISHED');
            
          } catch (error) {
            console.log(`❌ Smart automation error: ${error.message}`);
            console.log(error.stack);
            throw error;
          }