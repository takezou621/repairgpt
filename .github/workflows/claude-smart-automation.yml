name: Claude Smart Automation

on:
  schedule:
    # Âπ≥Êó•Â§úÈñìÂÆüË°å (23:00, 02:00, 05:00 JST)
    - cron: '0 14,17,20 * * 1-5'  # UTCÊôÇÈñì Êúà-Èáë
    # ÂúüÊó•ÊòºÈñìÂÆüË°å (10:00, 14:00, 18:00, 22:00 JST)
    - cron: '0 1,5,9,13 * * 0,6'  # UTCÊôÇÈñì ÂúüÊó•
  

jobs:
  smart-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
    
    - name: Smart Automation Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ SMART AUTOMATION START');
          const now = new Date();
          console.log(`Execution time: ${now.toISOString()}`);
          
          try {
            // ÂÖ®„Ç™„Éº„Éó„É≥Issue„ÇíÂèñÂæó
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 50
            });
            
            console.log(`Found ${issues.data.length} open issues`);
            
            // claude-processed„É©„Éô„É´„Åå„ÅÇ„ÇãIssue„ÇíÊ§úÁ¥¢
            const processedIssues = issues.data.filter(issue => 
              issue.labels.some(label => label.name === 'claude-processed')
            );
            
            console.log(`Found ${processedIssues.length} Claude-processed issues`);
            
            if (processedIssues.length === 0) {
              console.log('No Claude-processed issues found, ending');
              return;
            }
            
            for (const issue of processedIssues) {
              console.log(`\nüîç Processing Issue #${issue.number}: ${issue.title}`);
              
              try {
                // Èñ¢ÈÄ£„Éñ„É©„É≥„ÉÅ„ÇíÊ§úÁ¥¢
                const branches = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100
                });
                
                const claudeBranches = branches.data.filter(branch => 
                  branch.name.includes(`issue-${issue.number}`) ||
                  branch.name.includes(`claude`) && branch.name.includes(`${issue.number}`)
                );
                
                if (claudeBranches.length === 0) {
                  console.log(`No Claude branch found for Issue #${issue.number}`);
                  continue;
                }
                
                const claudeBranch = claudeBranches[0];
                console.log(`Found branch: ${claudeBranch.name}`);
                
                // Êó¢Â≠òPR„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                const existingPRs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${claudeBranch.name}`,
                  state: 'all'
                });
                
                let prNumber = null;
                
                if (existingPRs.data.length > 0) {
                  const pr = existingPRs.data[0];
                  console.log(`Found existing PR #${pr.number}, state: ${pr.state}`);
                  
                  if (pr.state === 'open') {
                    prNumber = pr.number;
                  } else {
                    console.log(`PR #${pr.number} is already ${pr.state}`);
                    continue;
                  }
                } else {
                  // PR„Çí‰ΩúÊàê
                  console.log(`üìù Creating PR for Issue #${issue.number}`);
                  
                  try {
                    const pr = await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `fix: ${issue.title} (closes #${issue.number})`,
                      head: claudeBranch.name,
                      base: 'main',
                      body: `## üöÄ „Çπ„Éû„Éº„ÉàËá™ÂãïÂåñÂá¶ÁêÜ

### Èñ¢ÈÄ£Issue
Closes #${issue.number}

### Ëá™ÂãïÂåñ„Éï„É≠„Éº
- [x] ‚úÖ Claude CodeÂÆüË£ÖÊ§úÁü•
- [x] ‚úÖ Ëá™ÂãïPR‰ΩúÊàêÔºàÂπ≥Êó•Â§úÈñì„ÉªÂúüÊó•ÊòºÈñìÔºâ
- [x] ‚úÖ Ëá™Âãï„Éû„Éº„Ç∏ÂÆüË°å
- [x] ‚úÖ IssueËá™Âãï„ÇØ„É≠„Éº„Ç∫
- [x] ‚úÖ „Éñ„É©„É≥„ÉÅËá™ÂãïÂâäÈô§

### ÂÆüË°åÊôÇÂàª
${now.toISOString()}

### „Çπ„Ç±„Ç∏„É•„Éº„É´
- Âπ≥Êó•: 23:00, 02:00, 05:00 JST
- ÂúüÊó•: 10:00, 14:00, 18:00, 22:00 JST

---
üöÄ **Smart Automation** | Generated with Claude Code Max`
                    });
                    
                    prNumber = pr.data.number;
                    console.log(`‚úÖ Created PR #${prNumber}`);
                    
                  } catch (prError) {
                    console.log(`‚ùå PR creation failed: ${prError.message}`);
                    continue;
                  }
                }
                
                // PR„Éû„Éº„Ç∏Âá¶ÁêÜ
                if (prNumber) {
                  console.log(`üîÑ Auto-merging PR #${prNumber}`);
                  
                  // „Éû„Éº„Ç∏Ââç„Å´Áü≠ÊôÇÈñìÂæÖÊ©ü
                  await new Promise(resolve => setTimeout(resolve, 3000));
                  
                  try {
                    await github.rest.pulls.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber,
                      commit_title: `Night Auto-merge: Issue #${issue.number}`,
                      merge_method: 'squash'
                    });
                    console.log(`‚úÖ Merged PR #${prNumber}`);
                  } catch (mergeError) {
                    console.log(`‚ö†Ô∏è Merge failed: ${mergeError.message}`);
                    continue;
                  }
                }
                
                // IssueÂÆå‰∫ÜÂá¶ÁêÜ
                console.log(`üîí Closing Issue #${issue.number}`);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `üöÄ **„Çπ„Éû„Éº„ÉàËá™ÂãïÂåñÂá¶ÁêÜÂÆå‰∫Ü**

Issue #${issue.number} „ÅÆ„Çπ„Éû„Éº„ÉàËá™ÂãïÂåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ

**ÂÆüË°åÂÜÖÂÆπ:**
- ü§ñ Claude CodeÂÆüË£ÖÊ§úÁü•
- üìù Ëá™ÂãïPR‰ΩúÊàê„Éª„Éû„Éº„Ç∏
- üîí IssueËá™Âãï„ÇØ„É≠„Éº„Ç∫
- üßπ „Éñ„É©„É≥„ÉÅËá™ÂãïÂâäÈô§

**ÂÆüË°åÊôÇÂàª:** ${now.toISOString()}

**ÂÆüË°å„Çπ„Ç±„Ç∏„É•„Éº„É´:**
- Âπ≥Êó•: Â§úÈñìËá™ÂãïÂÆüË°åÔºà23:00, 02:00, 05:00 JSTÔºâ
- ÂúüÊó•: ÊòºÈñìËá™ÂãïÂÆüË°åÔºà10:00, 14:00, 18:00, 22:00 JSTÔºâ

---
üöÄ **Smart Automation Success** | Generated with Claude Code Max`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['claude-completed', 'night-automation']
                });
                
                // „Éñ„É©„É≥„ÉÅÂâäÈô§
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${claudeBranch.name}`
                  });
                  console.log(`üóëÔ∏è Deleted branch ${claudeBranch.name}`);
                } catch (deleteError) {
                  console.log(`‚ö†Ô∏è Branch deletion failed: ${deleteError.message}`);
                }
                
                console.log(`üéØ Issue #${issue.number} NIGHT AUTOMATION COMPLETED!`);
                
              } catch (issueError) {
                console.log(`‚ùå Issue #${issue.number} processing failed: ${issueError.message}`);
                continue;
              }
            }
            
            console.log('\nüöÄ SMART AUTOMATION FINISHED');
            
          } catch (error) {
            console.log(`‚ùå Night automation error: ${error.message}`);
            console.log(error.stack);
            throw error;
          }