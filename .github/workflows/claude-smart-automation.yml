name: Claude Smart Automation

on:
  schedule:
    # 平日: 23:00, 02:00, 05:00 JST (14:00, 17:00, 20:00 UTC)
    - cron: '0 14,17,20 * * 1-5'
    # 土日: 10:00, 14:00, 18:00, 22:00 JST (01:00, 05:00, 09:00, 13:00 UTC)
    - cron: '0 1,5,9,13 * * 0,6'
  workflow_dispatch:

jobs:
  smart-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Smart Issue Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const now = new Date();
          const day = now.getDay(); // 0=Sunday, 6=Saturday
          const hour = now.getUTCHours();
          const isWeekend = day === 0 || day === 6;
          
          // APIレート制限チェック関数
          async function checkRateLimit() {
            const rateLimit = await github.rest.rateLimit.get();
            const remaining = rateLimit.data.rate.remaining;
            const resetTime = new Date(rateLimit.data.rate.reset * 1000);
            
            console.log(`📊 API Rate Limit: ${remaining} remaining`);
            console.log(`🔄 Reset time: ${resetTime.toISOString()}`);
            
            // 残りが100未満の場合は待機
            if (remaining < 100) {
              const waitTime = resetTime - now;
              console.log(`⏳ API rate limit low. Waiting ${Math.ceil(waitTime / 1000 / 60)} minutes...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
            
            return remaining;
          }
          
          console.log(`🤖 Claude Smart Automation started`);
          console.log(`Current time: ${now.toISOString()}`);
          console.log(`Day: ${day}, Hour: ${hour}UTC, Weekend: ${isWeekend}`);
          
          // APIコール前にレート制限をチェック
          await checkRateLimit();
          
          // Issue検索
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'claude-processed',
            state: 'open',
            sort: 'created',
            direction: 'asc'
          });

          if (issues.data.length === 0) {
            console.log('✅ No issues to process');
            return;
          }

          console.log(`📋 Found ${issues.data.length} issues for processing`);

          for (const issue of issues.data) {
            console.log(`\n🔍 Processing Issue #${issue.number}: ${issue.title}`);
            
            // 重複実行防止: processing ラベルのチェック
            const hasProcessingLabel = issue.labels.some(label => label.name === 'claude-processing');
            if (hasProcessingLabel) {
              console.log(`⚠️ Issue #${issue.number} is already being processed. Skipping...`);
              continue;
            }
            
            try {
              // 処理開始を示すラベルを追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['claude-processing']
              });
              
              // APIレート制限チェック
              await checkRateLimit();
              // ブランチ検索（柔軟なパターンマッチング）
              const branches = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              // Instead of strict patterns, use inclusive search
              const claudeBranches = branches.data.filter(branch => {
                const branchLower = branch.name.toLowerCase();
                const issueNum = issue.number.toString();
                
                return (
                  branchLower.includes(`issue-${issueNum}`) ||
                  (branchLower.includes(`claude`) && branchLower.includes(issueNum)) ||
                  branchLower.includes(`fix-${issueNum}`) ||
                  branchLower.includes(`feature-${issueNum}`)
                );
              });
              
              if (claudeBranches.length === 0) {
                console.log(`⚠️ No branch found for Issue #${issue.number}`);
                console.log(`Available branches: ${branches.data.slice(0, 10).map(b => b.name).join(', ')}...`);
                continue;
              }
              
              // Use the first matching branch
              const targetBranch = claudeBranches[0];
              console.log(`✅ Found branch: ${targetBranch.name} for Issue #${issue.number}`);
              
              if (claudeBranches.length > 1) {
                console.log(`ℹ️ Multiple branches found: ${claudeBranches.map(b => b.name).join(', ')}`);
              }
              
              // 既存PR確認
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${targetBranch.name}`,
                state: 'all'
              });
              
              if (existingPRs.data.length > 0) {
                console.log(`📝 PR already exists: #${existingPRs.data[0].number}`);
                continue;
              }
              
              // PR作成
              console.log(`🚀 Creating PR for Issue #${issue.number}...`);
              
              const timeContext = isWeekend ? '土日昼間' : '平日夜間';
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `fix: ${issue.title} (closes #${issue.number})`,
                head: targetBranch.name,
                base: 'main',
                body: [
                  '## 🤖 スマート自動化システム',
                  '',
                  '### 🕐 実行タイミング',
                  `- **実行時刻**: ${now.toISOString()}`,
                  `- **実行モード**: ${timeContext}自動実行`,
                  `- **曜日**: ${['日', '月', '火', '水', '木', '金', '土'][day]}曜日`,
                  '',
                  '### 📋 関連Issue',
                  `Closes #${issue.number}`,
                  '',
                  '### 🔄 自動化フロー',
                  '- [x] ✅ Issue自動検知',
                  '- [x] ✅ ブランチ自動発見',
                  '- [x] ✅ PR自動作成',
                  '- [ ] 🔄 自動マージ実行中',
                  '- [ ] 🔄 Issue自動クローズ',
                  '- [ ] 🔄 ブランチ自動削除',
                  '',
                  '### 📊 実行詳細',
                  `- **Branch**: \`${targetBranch.name}\``,
                  `- **実行環境**: GitHub Actions (${timeContext})`,
                  `- **自動化レベル**: 100%完全自動`,
                  '',
                  '---',
                  '🚀 **スマート自動化達成** | Generated with [Claude Code](https://claude.ai/code)',
                  '',
                  'Co-Authored-By: Claude <noreply@anthropic.com>'
                ].join('\n')
              });
              
              console.log(`✅ Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // ラベル追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['claude-auto-generated', 'smart-automation']
              });
              
              // 自動マージの待機
              console.log('⏳ Waiting before auto-merge...');
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              // セキュリティチェック実行
              console.log('🔒 Running security checks...');
              const securityIssues = [];
              
              // PRの変更ファイルを取得
              const prFiles = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.data.number
              });
              
              // セキュリティリスクのあるファイルパターン
              const riskyPatterns = [
                /\.env$/,
                /\.env\./,
                /secret/i,
                /password/i,
                /token/i,
                /key/i,
                /credential/i,
                /config\/production/,
                /\.pem$/,
                /\.key$/,
                /\.crt$/
              ];
              
              // セキュリティリスクのあるコンテンツパターン
              const riskyContentPatterns = [
                /password\s*=\s*['""][^'"]{8,}/i,
                /token\s*=\s*['""][^'"]{20,}/i,
                /api_key\s*=\s*['""][^'"]{20,}/i,
                /secret\s*=\s*['""][^'"]{10,}/i,
                /-----BEGIN.*PRIVATE KEY-----/i
              ];
              
              for (const file of prFiles.data) {
                // ファイル名チェック
                const isRiskyFile = riskyPatterns.some(pattern => pattern.test(file.filename));
                if (isRiskyFile) {
                  securityIssues.push(`🚨 Risky file: ${file.filename}`);
                }
                
                // ファイル内容チェック（パッチ内容）
                if (file.patch) {
                  const hasRiskyContent = riskyContentPatterns.some(pattern => pattern.test(file.patch));
                  if (hasRiskyContent) {
                    securityIssues.push(`🚨 Risky content in: ${file.filename}`);
                  }
                }
              }
              
              // セキュリティ問題が発見された場合の処理
              if (securityIssues.length > 0) {
                console.log(`❌ Security issues found: ${securityIssues.length}`);
                securityIssues.forEach(issue => console.log(issue));
                
                // セキュリティ警告コメントを追加
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  body: [
                    '🚨 **セキュリティチェック: 警告**',
                    '',
                    'この PR には潜在的なセキュリティリスクが含まれている可能性があります：',
                    '',
                    ...securityIssues.map(issue => `- ${issue}`),
                    '',
                    '⚠️ **自動マージを停止しました**',
                    '',
                    '手動レビューが必要です。機密情報が含まれていないことを確認してください。',
                    '',
                    '---',
                    '🤖 自動セキュリティチェック'
                  ].join('\n')
                });
                
                // セキュリティラベルを追加
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  labels: ['security-review-required', 'blocked-auto-merge']
                });
                
                console.log('🛑 Auto-merge blocked due to security concerns');
                continue; // 次のIssueに進む
              }
              
              console.log('✅ Security checks passed');
              
              // 自動マージ実行
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.data.number,
                  commit_title: `Smart automation: ${issue.title} (#${issue.number})`,
                  commit_message: `${timeContext}スマート自動化によるマージ\n\n🚀 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>`,
                  merge_method: 'squash'
                });
                
                console.log(`🎉 Successfully merged PR #${pr.data.number}`);
                
                // 成功通知
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '✅ **スマート自動化完了！**',
                    '',
                    `🕐 **実行時刻**: ${now.toISOString()}`,
                    `📅 **実行モード**: ${timeContext}自動実行`,
                    '',
                    '**実行内容:**',
                    '- 🔍 Issue自動検知・処理',
                    `- 📝 PR自動作成: #${pr.data.number}`,
                    '- ✅ 自動マージ完了',
                    '- 🧹 ブランチクリーンアップ実行中',
                    '',
                    `**PR**: ${pr.data.html_url}`,
                    '',
                    '---',
                    '🚀 **スマート自動化システム** | Claude Code + GitHub Actions'
                  ].join('\n')
                });
                
                // Issue完了処理
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                // 処理完了ラベルを追加し、processingラベルを削除
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['claude-completed', 'smart-automation']
                });
                
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'claude-processing'
                });
                
                console.log(`🔒 Closed Issue #${issue.number}`);
                
                // ブランチ削除
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${targetBranch.name}`
                  });
                  
                  console.log(`🗑️ Deleted branch ${targetBranch.name}`);
                } catch (deleteError) {
                  console.log(`⚠️ Branch deletion failed: ${deleteError.message}`);
                }
                
                console.log(`🎯 SMART AUTOMATION COMPLETED FOR ISSUE #${issue.number}!`);
                
              } catch (mergeError) {
                console.log(`❌ Merge failed for PR #${pr.data.number}: ${mergeError.message}`);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '⚠️ スマート自動化: マージエラー',
                    '',
                    `PR #${pr.data.number}: ${pr.data.html_url}`,
                    '',
                    `エラー: ${mergeError.message}`,
                    '',
                    '手動マージが必要です。'
                  ].join('\n')
                });
              }
              
            } catch (error) {
              console.log(`❌ Error processing Issue #${issue.number}: ${error.message}`);
              
              // エラー時はprocessingラベルを削除
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'claude-processing'
                });
              } catch (removeLabelError) {
                // ラベル削除エラーは無視
              }
              
              // 重大エラーの場合、新しいIssueを作成
              if (error.status === 500 || error.status === 502 || error.status === 503) {
                try {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `[自動化エラー] Issue #${issue.number} の処理中にエラーが発生`,
                    body: [
                      '## エラー詳細',
                      '',
                      `- **元のIssue**: #${issue.number}`,
                      `- **エラー時刻**: ${now.toISOString()}`,
                      `- **エラーステータス**: ${error.status}`,
                      `- **エラーメッセージ**: ${error.message}`,
                      '',
                      '## スタックトレース',
                      '```',
                      error.stack || 'スタックトレースなし',
                      '```',
                      '',
                      '---',
                      '🤖 自動生成されたエラーレポート'
                    ].join('\n'),
                    labels: ['bug', 'automation-error', 'high-priority']
                  });
                  console.log('📝 Created error issue for critical error');
                } catch (issueError) {
                  console.log(`Failed to create error issue: ${issueError.message}`);
                }
              }
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '❌ スマート自動化エラー',
                    '',
                    `エラー: ${error.message}`,
                    `実行時刻: ${now.toISOString()}`,
                    '',
                    '手動確認をお願いします。'
                  ].join('\n')
                });
              } catch (commentError) {
                console.log(`Failed to add error comment: ${commentError.message}`);
              }
            }
          }
          
          console.log('\n🚀 Claude Smart Automation completed!');