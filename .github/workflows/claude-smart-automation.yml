name: Claude Smart Automation

on:
  schedule:
    # 平日: 23:00, 02:00, 05:00 JST (14:00, 17:00, 20:00 UTC)
    - cron: '0 14,17,20 * * 1-5'
    # 土日: 10:00, 14:00, 18:00, 22:00 JST (01:00, 05:00, 09:00, 13:00 UTC)
    - cron: '0 1,5,9,13 * * 0,6'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Enable dry run mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  smart-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    env:
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Smart Issue Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const now = new Date();
          const day = now.getDay(); // 0=Sunday, 6=Saturday
          const hour = now.getUTCHours();
          const isWeekend = day === 0 || day === 6;
          
          // ドライランモード (環境変数で制御)
          const isDryRun = process.env.DRY_RUN === 'true';
          if (isDryRun) {
            console.log('🧪 DRY RUN MODE: Actions will be simulated only');
          }
          
          // 入力検証
          function validateInputs() {
            if (!context.repo.owner || !context.repo.repo) {
              throw new Error('Repository owner or name is missing');
            }
            return true;
          }
          
          // APIレート制限チェック関数 (タイミングバグ修正)
          async function checkRateLimit() {
            const rateLimit = await github.rest.rateLimit.get();
            const remaining = rateLimit.data.rate.remaining;
            const resetTime = new Date(rateLimit.data.rate.reset * 1000);
            const currentTime = new Date(); // 現在時刻を動的取得
            
            console.log(`📊 API Rate Limit: ${remaining} remaining`);
            console.log(`🔄 Reset time: ${resetTime.toISOString()}`);
            
            // 残りが100未満の場合は待機
            if (remaining < 100) {
              const waitTime = Math.max(0, resetTime - currentTime); // 負の値を防止
              const waitMinutes = Math.ceil(waitTime / 1000 / 60);
              console.log(`⏳ API rate limit low. Waiting ${waitMinutes} minutes...`);
              
              if (waitTime > 0 && waitTime < 3600000) { // 1時間以内のみ待機
                if (isDryRun) {
                  console.log('🧪 DRY RUN: Skipping actual wait');
                } else {
                  await new Promise(resolve => setTimeout(resolve, waitTime));
                }
              } else if (waitTime >= 3600000) {
                throw new Error(`Wait time too long: ${waitMinutes} minutes. Aborting.`);
              }
            }
            
            return remaining;
          }
          
          console.log(`🤖 Claude Smart Automation started`);
          console.log(`Current time: ${now.toISOString()}`);
          console.log(`Day: ${day}, Hour: ${hour}UTC, Weekend: ${isWeekend}`);
          
          // 入力検証
          validateInputs();
          
          // APIコール前にレート制限をチェック
          await checkRateLimit();
          
          // Issue検索
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'claude-processed',
            state: 'open',
            sort: 'created',
            direction: 'asc'
          });

          if (issues.data.length === 0) {
            console.log('✅ No issues to process');
            return;
          }

          console.log(`📋 Found ${issues.data.length} issues for processing`);

          for (const issue of issues.data) {
            console.log(`\n🔍 Processing Issue #${issue.number}: ${issue.title}`);
            
            // 重複実行防止: processing ラベルのチェック
            const hasProcessingLabel = issue.labels.some(label => label.name === 'claude-processing');
            if (hasProcessingLabel) {
              console.log(`⚠️ Issue #${issue.number} is already being processed. Skipping...`);
              continue;
            }
            
            try {
              // 処理開始を示すラベルを追加
              if (isDryRun) {
                console.log('🧪 DRY RUN: Would add label "claude-processing" to Issue #' + issue.number);
              } else {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['claude-processing']
                });
              }
              
              // APIレート制限チェック
              await checkRateLimit();
              // ブランチ検索（柔軟なパターンマッチング）
              const branches = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              // Instead of strict patterns, use inclusive search
              const claudeBranches = branches.data.filter(branch => {
                const branchLower = branch.name.toLowerCase();
                const issueNum = issue.number.toString();
                
                return (
                  branchLower.includes(`issue-${issueNum}`) ||
                  (branchLower.includes(`claude`) && branchLower.includes(issueNum)) ||
                  branchLower.includes(`fix-${issueNum}`) ||
                  branchLower.includes(`feature-${issueNum}`)
                );
              });
              
              if (claudeBranches.length === 0) {
                console.log(`⚠️ No branch found for Issue #${issue.number} - Starting automatic implementation`);
                
                // 🚀 PHASE 1: 未着手Issue自動実装機能
                const newBranchName = `claude-auto-impl-issue-${issue.number}`;
                
                try {
                  // 新しいブランチを作成
                  const mainBranch = await github.rest.repos.getBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    branch: 'main'
                  });
                  
                  if (isDryRun) {
                    console.log(`🧪 DRY RUN: Would create branch ${newBranchName}`);
                  } else {
                    await github.rest.git.createRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `refs/heads/${newBranchName}`,
                      sha: mainBranch.data.commit.sha
                    });
                  }
                  
                  console.log(`✅ Created new branch: ${newBranchName}`);
                  
                  // Issue内容を分析してファイル変更を決定
                  const issueBody = issue.body || '';
                  const issueTitle = issue.title || '';
                  const combinedText = `${issueTitle}\n\n${issueBody}`;
                  
                  // 🤖 Claude Code風の簡易実装判定ロジック
                  let implementationType = 'documentation';
                  let targetFiles = [];
                  let implementationContent = '';
                  
                  // 実装タイプを判定
                  if (combinedText.match(/ワークフロー|workflow|github.*action/i)) {
                    implementationType = 'workflow';
                    targetFiles = ['.github/workflows/claude-smart-automation.yml'];
                  } else if (combinedText.match(/機能.*追加|feature.*add|実装|implement/i)) {
                    implementationType = 'feature';
                    targetFiles = ['src/new-feature.py', 'tests/test_new_feature.py'];
                  } else if (combinedText.match(/バグ|bug|修正|fix|エラー|error/i)) {
                    implementationType = 'bugfix';
                    targetFiles = ['src/bugfix.py'];
                  } else if (combinedText.match(/ドキュメント|document|docs|readme/i)) {
                    implementationType = 'documentation';
                    targetFiles = [`docs/auto-generated/issue-${issue.number}.md`];
                  }
                  
                  // 実装内容を生成
                  if (implementationType === 'workflow') {
                    implementationContent = `# GitHub Actions ワークフロー改善 (Issue #${issue.number})
# ${issueTitle}

# このファイルは Claude Smart Automation により自動生成されました
# 実装詳細:
# - Issue分析: ${implementationType}
# - 対象: GitHub Actions ワークフロー
# - 自動化レベル: 100%

# ⚠️ この実装は基本テンプレートです
# 詳細な実装は手動で調整してください

# ワークフロー改善提案:
# 1. エラーハンドリングの強化
# 2. ログ出力の改善  
# 3. パフォーマンス最適化

# 参考Issue: https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issue.number}
`;
                  } else if (implementationType === 'feature') {
                    implementationContent = `# ${issueTitle} - 自動実装
# Issue #${issue.number} の自動実装

def auto_implemented_feature():
    """
    Claude Smart Automation による自動実装
    
    この関数は Issue #${issue.number} の要求に基づいて
    自動生成されました。
    
    TODO: 具体的な実装内容を追加してください
    """
    
    print(f"新機能実装: {issue.title}")
    
    # 基本実装テンプレート
    return {
        'status': 'auto_implemented',
        'issue_number': ${issue.number},
        'implementation_type': '${implementationType}',
        'requires_manual_review': True
    }

if __name__ == "__main__":
    result = auto_implemented_feature()
    print(f"実装結果: {result}")
`;
                  } else if (implementationType === 'bugfix') {
                    implementationContent = `# Bug Fix for Issue #${issue.number}
# ${issueTitle}

def auto_bugfix():
    """
    Claude Smart Automation による自動バグ修正
    
    Issue #${issue.number} で報告されたバグの
    自動修正実装です。
    
    ⚠️ この修正は基本テンプレートです
    実際のバグ内容に応じて調整が必要です
    """
    
    print(f"バグ修正実装: ${issue.title}")
    
    # 一般的なバグ修正パターン
    try:
        # エラーハンドリング追加
        pass  # TODO: 実際のバグ修正コード
    except Exception as e:
        print(f"修正処理エラー: {e}")
        return False
    
    return True

# 修正テスト
if __name__ == "__main__":
    if auto_bugfix():
        print("✅ バグ修正完了")
    else:
        print("❌ バグ修正失敗")
`;
                  } else {
                    implementationContent = `# ${issueTitle}

## Issue #${issue.number} 自動対応

この文書は **Claude Smart Automation** により自動生成されました。

### 📋 Issue概要
- **Issue番号**: #${issue.number}
- **タイトル**: ${issueTitle}
- **実装タイプ**: ${implementationType}
- **自動生成日時**: ${new Date().toISOString()}

### 🤖 自動実装内容

${issueBody ? '**Issue詳細:**\n' + issueBody + '\n' : ''}

### ✅ 実装項目
- [x] Issue内容の自動分析
- [x] 基本実装テンプレート生成
- [x] PR自動作成
- [ ] 詳細実装（手動調整必要）
- [ ] テスト実装
- [ ] ドキュメント更新

### 🔄 次のステップ
1. 生成された実装内容を確認
2. 必要に応じて詳細を追加
3. テストケースの作成
4. 最終的な動作確認

### 📊 自動化統計
- **処理時間**: 自動
- **実装ファイル数**: ${targetFiles.length}
- **自動化レベル**: 基本実装完了

---
🚀 **Claude Smart Automation** - 未着手Issue自動実装システム

Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
`;
                  }
                  
                  // ファイルの作成または更新
                  for (const filePath of targetFiles) {
                    try {
                      if (isDryRun) {
                        console.log(`🧪 DRY RUN: Would create/update file ${filePath}`);
                      } else {
                        // ファイルの存在確認
                        let fileExists = false;
                        let currentSha = null;
                        
                        try {
                          const existingFile = await github.rest.repos.getContent({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            path: filePath,
                            ref: newBranchName
                          });
                          fileExists = true;
                          currentSha = existingFile.data.sha;
                        } catch (e) {
                          // ファイルが存在しない場合
                          fileExists = false;
                        }
                        
                        const encodedContent = Buffer.from(implementationContent).toString('base64');
                        
                        if (fileExists) {
                          // ファイル更新
                          await github.rest.repos.createOrUpdateFileContents({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            path: filePath,
                            message: `Auto-implementation: Update ${filePath} for Issue #${issue.number}`,
                            content: encodedContent,
                            branch: newBranchName,
                            sha: currentSha
                          });
                        } else {
                          // ファイル作成
                          await github.rest.repos.createOrUpdateFileContents({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            path: filePath,
                            message: `Auto-implementation: Create ${filePath} for Issue #${issue.number}`,
                            content: encodedContent,
                            branch: newBranchName
                          });
                        }
                      }
                      
                      console.log(`📝 Created/Updated: ${filePath}`);
                    } catch (fileError) {
                      console.log(`⚠️ Failed to create/update ${filePath}: ${fileError.message}`);
                    }
                  }
                  
                  // 自動実装完了コメント
                  if (isDryRun) {
                    console.log('🧪 DRY RUN: Would add auto-implementation comment');
                  } else {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: [
                        '🚀 **未着手Issue自動実装開始！**',
                        '',
                        `✅ **新ブランチ作成**: \`${newBranchName}\``,
                        `🤖 **実装タイプ**: ${implementationType}`,
                        `📝 **対象ファイル**: ${targetFiles.length}個`,
                        '',
                        '**自動実装内容:**',
                        ...targetFiles.map(file => `- 📄 ${file}`),
                        '',
                        '**次のステップ:**',
                        '- 🔄 PR自動作成中...',
                        '- 📊 基本実装テンプレート生成済み',
                        '- ⚠️ 詳細実装は手動調整が必要です',
                        '',
                        '---',
                        '🤖 **Claude Smart Automation** - 未着手Issue自動実装機能'
                      ].join('\n')
                    });
                  }
                  
                  // 新しく作成したブランチを使用して処理を続行
                  const newTargetBranch = { name: newBranchName };
                  console.log(`🔄 Continuing with auto-created branch: ${newBranchName}`);
                  
                  // ここで既存の処理フローに戻る（PR作成等）
                  // targetBranchを新しいブランチに設定
                  claudeBranches = [newTargetBranch];
                  
                } catch (autoImplError) {
                  console.log(`❌ Auto-implementation failed for Issue #${issue.number}: ${autoImplError.message}`);
                  
                  // エラー時のコメント
                  try {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: [
                        '❌ **自動実装エラー**',
                        '',
                        `エラー詳細: ${autoImplError.message}`,
                        '',
                        '手動でブランチ作成と実装をお願いします。',
                        '',
                        '---',
                        '🤖 Claude Smart Automation - エラーレポート'
                      ].join('\n')
                    });
                  } catch (commentError) {
                    console.log(`Failed to add error comment: ${commentError.message}`);
                  }
                  
                  continue; // 次のIssueに進む
                }
              }
              
              // 既存ブランチまたは新規作成ブランチが利用可能な場合の処理
              if (claudeBranches.length === 0) {
                console.log(`❌ No valid branch available for Issue #${issue.number}`);
                continue;
              }
              
              // Use the first matching branch
              const targetBranch = claudeBranches[0];
              console.log(`✅ Found branch: ${targetBranch.name} for Issue #${issue.number}`);
              
              if (claudeBranches.length > 1) {
                console.log(`ℹ️ Multiple branches found: ${claudeBranches.map(b => b.name).join(', ')}`);
              }
              
              // 既存PR確認
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${targetBranch.name}`,
                state: 'all'
              });
              
              if (existingPRs.data.length > 0) {
                console.log(`📝 PR already exists: #${existingPRs.data[0].number}`);
                continue;
              }
              
              // PR作成
              console.log(`🚀 Creating PR for Issue #${issue.number}...`);
              
              const timeContext = isWeekend ? '土日昼間' : '平日夜間';
              let pr;
              
              if (isDryRun) {
                console.log('🧪 DRY RUN: Would create PR for Issue #' + issue.number);
                pr = { data: { number: 999, html_url: 'https://github.com/mock/pr/999' } }; // モックPR
              } else {
                pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `fix: ${issue.title} (closes #${issue.number})`,
                head: targetBranch.name,
                base: 'main',
                body: [
                  '## 🤖 スマート自動化システム',
                  '',
                  '### 🕐 実行タイミング',
                  `- **実行時刻**: ${now.toISOString()}`,
                  `- **実行モード**: ${timeContext}自動実行`,
                  `- **曜日**: ${['日', '月', '火', '水', '木', '金', '土'][day]}曜日`,
                  '',
                  '### 📋 関連Issue',
                  `Closes #${issue.number}`,
                  '',
                  '### 🔄 自動化フロー',
                  '- [x] ✅ Issue自動検知',
                  '- [x] ✅ ブランチ自動発見',
                  '- [x] ✅ PR自動作成',
                  '- [ ] 🔄 自動マージ実行中',
                  '- [ ] 🔄 Issue自動クローズ',
                  '- [ ] 🔄 ブランチ自動削除',
                  '',
                  '### 📊 実行詳細',
                  `- **Branch**: \`${targetBranch.name}\``,
                  `- **実行環境**: GitHub Actions (${timeContext})`,
                  `- **自動化レベル**: 100%完全自動`,
                  '',
                  '---',
                  '🚀 **スマート自動化達成** | Generated with [Claude Code](https://claude.ai/code)',
                  '',
                  'Co-Authored-By: Claude <noreply@anthropic.com>'
                ].join('\n')
                });
              }
              
              console.log(`✅ Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // ラベル追加
              if (isDryRun) {
                console.log('🧪 DRY RUN: Would add labels to PR #' + pr.data.number);
              } else {
                await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['claude-auto-generated', 'smart-automation']
                });
              }
              
              // 自動マージの待機
              console.log('⏳ Waiting before auto-merge...');
              if (isDryRun) {
                console.log('🧪 DRY RUN: Skipping wait time');
              } else {
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
              
              // セキュリティチェック実行
              console.log('🔒 Running security checks...');
              const securityIssues = [];
              
              // PRの変更ファイルを取得
              let prFiles;
              if (isDryRun) {
                console.log('🧪 DRY RUN: Using mock PR files');
                prFiles = { data: [] }; // モックファイルリスト
              } else {
                prFiles = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.data.number
                });
              }
              
              // セキュリティリスクのあるファイルパターン
              const riskyPatterns = [
                /\.env$/,
                /\.env\./,
                /secret/i,
                /password/i,
                /token/i,
                /key/i,
                /credential/i,
                /config\/production/,
                /\.pem$/,
                /\.key$/,
                /\.crt$/
              ];
              
              // セキュリティリスクのあるコンテンツパターン
              const riskyContentPatterns = [
                /password\s*=\s*['""][^'"]{8,}/i,
                /token\s*=\s*['""][^'"]{20,}/i,
                /api_key\s*=\s*['""][^'"]{20,}/i,
                /secret\s*=\s*['""][^'"]{10,}/i,
                /-----BEGIN.*PRIVATE KEY-----/i
              ];
              
              for (const file of prFiles.data) {
                // ファイル名チェック
                const isRiskyFile = riskyPatterns.some(pattern => pattern.test(file.filename));
                if (isRiskyFile) {
                  securityIssues.push(`🚨 Risky file: ${file.filename}`);
                }
                
                // ファイル内容チェック（パッチ内容）
                if (file.patch) {
                  const hasRiskyContent = riskyContentPatterns.some(pattern => pattern.test(file.patch));
                  if (hasRiskyContent) {
                    securityIssues.push(`🚨 Risky content in: ${file.filename}`);
                  }
                }
              }
              
              // セキュリティ問題が発見された場合の処理
              if (securityIssues.length > 0) {
                console.log(`❌ Security issues found: ${securityIssues.length}`);
                securityIssues.forEach(issue => console.log(issue));
                
                // セキュリティ警告コメントを追加
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  body: [
                    '🚨 **セキュリティチェック: 警告**',
                    '',
                    'この PR には潜在的なセキュリティリスクが含まれている可能性があります：',
                    '',
                    ...securityIssues.map(issue => `- ${issue}`),
                    '',
                    '⚠️ **自動マージを停止しました**',
                    '',
                    '手動レビューが必要です。機密情報が含まれていないことを確認してください。',
                    '',
                    '---',
                    '🤖 自動セキュリティチェック'
                  ].join('\n')
                });
                
                // セキュリティラベルを追加
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  labels: ['security-review-required', 'blocked-auto-merge']
                });
                
                console.log('🛑 Auto-merge blocked due to security concerns');
                continue; // 次のIssueに進む
              }
              
              console.log('✅ Security checks passed');
              
              // 自動マージ実行
              try {
                if (isDryRun) {
                  console.log('🧪 DRY RUN: Would merge PR #' + pr.data.number);
                } else {
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.data.number,
                    commit_title: `Smart automation: ${issue.title} (#${issue.number})`,
                    commit_message: `${timeContext}スマート自動化によるマージ\n\n🚀 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>`,
                    merge_method: 'squash'
                  });
                }
                
                console.log(`🎉 Successfully merged PR #${pr.data.number}`);
                
                // 成功通知
                if (isDryRun) {
                  console.log('🧪 DRY RUN: Would add success comment to Issue #' + issue.number);
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: [
                      '✅ **スマート自動化完了！**',
                      '',
                      `🕐 **実行時刻**: ${now.toISOString()}`,
                      `📅 **実行モード**: ${timeContext}自動実行`,
                      '',
                      '**実行内容:**',
                      '- 🔍 Issue自動検知・処理',
                      `- 📝 PR自動作成: #${pr.data.number}`,
                      '- ✅ 自動マージ完了',
                      '- 🧹 ブランチクリーンアップ実行中',
                      '',
                      `**PR**: ${pr.data.html_url}`,
                      '',
                      '---',
                      '🚀 **スマート自動化システム** | Claude Code + GitHub Actions'
                    ].join('\n')
                  });
                }
                
                // Issue完了処理
                if (isDryRun) {
                  console.log('🧪 DRY RUN: Would close Issue #' + issue.number);
                } else {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });
                  
                  // 処理完了ラベルを追加し、processingラベルを削除
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['claude-completed', 'smart-automation']
                  });
                  
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: 'claude-processing'
                  });
                }
                
                console.log(`🔒 Closed Issue #${issue.number}`);
                
                // ブランチ削除
                if (isDryRun) {
                  console.log('🧪 DRY RUN: Would delete branch ' + targetBranch.name);
                } else {
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  
                  try {
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${targetBranch.name}`
                    });
                    
                    console.log(`🗑️ Deleted branch ${targetBranch.name}`);
                  } catch (deleteError) {
                    console.log(`⚠️ Branch deletion failed: ${deleteError.message}`);
                  }
                }
                
                console.log(`🎯 SMART AUTOMATION COMPLETED FOR ISSUE #${issue.number}!`);
                
              } catch (mergeError) {
                console.log(`❌ Merge failed for PR #${pr.data.number}: ${mergeError.message}`);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '⚠️ スマート自動化: マージエラー',
                    '',
                    `PR #${pr.data.number}: ${pr.data.html_url}`,
                    '',
                    `エラー: ${mergeError.message}`,
                    '',
                    '手動マージが必要です。'
                  ].join('\n')
                });
              }
              
            } catch (error) {
              console.log(`❌ Error processing Issue #${issue.number}: ${error.message}`);
              
              // エラー時はprocessingラベルを削除
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'claude-processing'
                });
              } catch (removeLabelError) {
                // ラベル削除エラーは無視
              }
              
              // 重大エラーの場合、新しいIssueを作成
              if (error.status === 500 || error.status === 502 || error.status === 503) {
                try {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `[自動化エラー] Issue #${issue.number} の処理中にエラーが発生`,
                    body: [
                      '## エラー詳細',
                      '',
                      `- **元のIssue**: #${issue.number}`,
                      `- **エラー時刻**: ${now.toISOString()}`,
                      `- **エラーステータス**: ${error.status}`,
                      `- **エラーメッセージ**: ${error.message}`,
                      '',
                      '## スタックトレース',
                      '```',
                      error.stack || 'スタックトレースなし',
                      '```',
                      '',
                      '---',
                      '🤖 自動生成されたエラーレポート'
                    ].join('\n'),
                    labels: ['bug', 'automation-error', 'high-priority']
                  });
                  console.log('📝 Created error issue for critical error');
                } catch (issueError) {
                  console.log(`Failed to create error issue: ${issueError.message}`);
                }
              }
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: [
                    '❌ スマート自動化エラー',
                    '',
                    `エラー: ${error.message}`,
                    `実行時刻: ${now.toISOString()}`,
                    '',
                    '手動確認をお願いします。'
                  ].join('\n')
                });
              } catch (commentError) {
                console.log(`Failed to add error comment: ${commentError.message}`);
              }
            }
          }
          
          // 💡 実行統計とサマリー
          console.log('\n📊 === EXECUTION SUMMARY ===');
          console.log(`🕐 実行時刻: ${now.toISOString()}`);
          console.log(`📋 処理対象Issue数: ${issues.data.length}`);
          console.log(`⏰ 実行モード: ${isWeekend ? '土日昼間' : '平日夜間'}自動実行`);
          console.log(`🤖 自動化機能: 未着手Issue自動実装対応済み`);
          console.log('========================');
          
          console.log('\n🚀 Claude Smart Automation completed!');