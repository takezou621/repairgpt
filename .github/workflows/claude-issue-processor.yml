name: Claude Issue Processor

on:
  schedule:
    - cron: '0 14 * * *'  # UTC 14:00 = JST 23:00
  workflow_dispatch:

jobs:
  process-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Find and process unprocessed issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          console.log('Searching for unprocessed issues...');
          
          try {
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: '',
              sort: 'created',
              direction: 'asc',
              per_page: 100
            });
            
            const unprocessedIssues = [];
            for (const issue of issues.data) {
              const labels = issue.labels.map(label => label.name);
              if (!labels.includes('claude-processed') && !labels.includes('wontfix')) {
                unprocessedIssues.push(issue);
              }
            }
            
            if (unprocessedIssues.length === 0) {
              console.log('No unprocessed issues found');
              return;
            }
            
            const priorityOrder = { 
              'priority:high': 1, 
              'priority:medium': 2, 
              'priority:low': 3 
            };
            unprocessedIssues.sort((a, b) => {
              const aPriority = a.labels.find(label => label.name.startsWith('priority:'));
              const bPriority = b.labels.find(label => label.name.startsWith('priority:'));
              
              const aOrder = aPriority ? priorityOrder[aPriority.name] || 4 : 4;
              const bOrder = bPriority ? priorityOrder[bPriority.name] || 4 : 4;
              
              return aOrder - bOrder;
            });
            
            const targetIssue = unprocessedIssues[0];
            console.log('Processing issue #' + targetIssue.number + ': ' + targetIssue.title);
            
            const comment = '@claude このissueを解決してください。\n\n以下の点に注意して作業を進めてください：\n- 既存のコードスタイルとドキュメント規約に従う\n- 適切なテストコードを含める\n- 必要に応じてドキュメントを更新する\n- セキュリティベストプラクティスに従う\n\n**Note**: Claude Code Max (Opus 4)を使用して高度な分析と実装を行います。\n\n作業が完了したら、実装内容の概要を報告してください。';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: targetIssue.number,
              body: comment
            });
            
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: targetIssue.number,
              labels: ['claude-processed']
            });
            
            console.log('Issue #' + targetIssue.number + ' has been marked for Claude processing');
            
          } catch (error) {
            console.error('Error processing issues:', error);
            throw error;
          }
    
    - name: Wait for processing
      run: |
        echo "Issue has been marked for Claude processing"
        echo "Claude will process this issue asynchronously"
        sleep 60