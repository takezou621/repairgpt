{
  "permissions": {
    "allow": [
      "Bash(gh issue create:*)",
      "Bash(gh issue close:*)",
      "Bash(mkdir:*)",
      "Bash(gh issue comment:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "WebFetch(domain:github.com)",
      "Bash(gh issue view:*)",
      "WebFetch(domain:www.ifixit.com)",
      "Bash(python:*)",
      "Bash(pip3 install:*)",
      "Bash(gh label create:*)",
      "Bash(gh workflow run:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(yamllint:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh api:*)",
      "Bash(gh workflow view:*)",
      "Bash(echo:*)",
      "Bash(gh workflow:*)",
      "Bash(gh repo view:*)",
      "Bash(node:*)",
      "Bash(gh label:*)",
      "Bash(git reset:*)",
      "Bash(gh pr create:*)",
      "Bash(gh issue:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr checkout:*)",
      "Bash(git merge:*)",
      "Bash(mv:*)",
      "Bash(gh pr review:*)",
      "Bash(grep:*)",
      "Bash(python3:*)",
      "Bash(pip3 install:*)",
      "Bash(export:*)",
      "Bash(flake8:*)",
      "Bash(black:*)",
      "Bash(python -m pytest tests/unit/test_auth/test_security.py -v)",
      "Bash(curl:*)",
      "Bash(pgrep:*)",
      "Bash(pkill:*)",
      "Bash(lsof:*)",
      "Bash(gh pr:*)",
      "Bash(PYTHONPATH=/Users/kawai/dev/repairgpt/src python3 src/auto_feature_60.py)",
      "Bash(PYTHONPATH=/Users/kawai/dev/repairgpt/src python3 src/auto_feature_115.py)",
      "Bash(git rm:*)",
      "Bash(PYTHONPATH=/Users/kawai/dev/repairgpt/src python3 src/auto_placeholder_116.py)",
      "Bash(PYTHONPATH=/Users/kawai/dev/repairgpt/src python3:*)",
      "Bash(PYTHONPATH=src python3 -c \"\nimport asyncio\nfrom src.auto_placeholder_116 import IFixitIntegration\n\nasync def test_searches():\n    integration = IFixitIntegration()\n    \n    print(''üîç Testing comprehensive iFixit integration searches:'')\n    print(''='' * 55)\n    \n    # Test 1: Nintendo Switch Joy-Con\n    print(''\\n1Ô∏è‚É£ Joy-Con drift repair:'')\n    results = await integration.search_guides(''joy-con drift'', ''Nintendo Switch'', limit=2)\n    if results[''success'']:\n        for guide in results[''guides'']:\n            print(f''   ‚úÖ {guide[\"\"title\"\"]} ({guide[\"\"difficulty\"\"]})'')\n    \n    # Test 2: Laptop troubleshooting\n    print(''\\n2Ô∏è‚É£ Laptop boot issues:'')\n    results = await integration.search_guides(''boot'', ''Laptop'', limit=2)\n    if results[''success'']:\n        for guide in results[''guides'']:\n            print(f''   ‚úÖ {guide[\"\"title\"\"]} ({guide[\"\"difficulty\"\"]})'')\n    \n    # Test 3: PlayStation overheating\n    print(''\\n3Ô∏è‚É£ PS5 overheating:'')\n    results = await integration.search_guides(''overheating'', ''PlayStation'', limit=2)\n    if results[''success'']:\n        for guide in results[''guides'']:\n            print(f''   ‚úÖ {guide[\"\"title\"\"]} ({guide[\"\"difficulty\"\"]})'')\n    \n    print(''\\n‚úÖ All integration tests completed successfully!'')\n\nasyncio.run(test_searches())\n\")",
      "WebFetch(domain:lefthook.dev)",
      "Bash(brew install:*)",
      "Bash(lefthook version:*)",
      "Bash(lefthook:*)",
      "Bash(LEFTHOOK=0 git commit -m \"feat(hooks): add lefthook configuration for automated code quality\")",
      "Bash(LEFTHOOK=0 git commit -m \"feat: test lefthook auto-formatting functionality\")",
      "Bash(LEFTHOOK=0 git commit -m \"improve: optimize lefthook configuration for better performance\")",
      "Bash(LEFTHOOK=0 git commit -m \"docs: add comprehensive lefthook documentation and README updates\")",
      "Bash(LEFTHOOK=0 git commit -m \"cleanup: remove lefthook test file\")",
      "Bash(LEFTHOOK=0 git push -u origin feature/lefthook-integration)",
      "Bash(LEFTHOOK=0 git commit -m \"test: verify lefthook functionality\")"
    ],
    "deny": []
  }
}